pip install fastapi uvicorn

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List, Optional

# Initialize FastAPI app
app = FastAPI()

# Sample in-memory data (Dictionary to store items)
fake_db = {}

# Pydantic model for the item (data format)
class Item(BaseModel):
    name: str
    description: Optional[str] = None
    price: float
    tax: Optional[float] = None

# Endpoint to read all items
@app.get("/items", response_model=List[Item])
async def get_items():
    return list(fake_db.values())

# Endpoint to read a single item by its ID
@app.get("/items/{item_id}", response_model=Item)
async def get_item(item_id: int):
    if item_id not in fake_db:
        raise HTTPException(status_code=404, detail="Item not found")
    return fake_db[item_id]

# Endpoint to create a new item
@app.post("/items/", response_model=Item)
async def create_item(item: Item):
    item_id = len(fake_db) + 1  # Simple ID generator
    fake_db[item_id] = item
    return item

# Endpoint to update an item by its ID
@app.put("/items/{item_id}", response_model=Item)
async def update_item(item_id: int, item: Item):
    if item_id not in fake_db:
        raise HTTPException(status_code=404, detail="Item not found")
    fake_db[item_id] = item
    return item

# Endpoint to delete an item by its ID
@app.delete("/items/{item_id}", response_model=Item)
async def delete_item(item_id: int):
    if item_id not in fake_db:
        raise HTTPException(status_code=404, detail="Item not found")
    deleted_item = fake_db.pop(item_id)
    return deleted_item
